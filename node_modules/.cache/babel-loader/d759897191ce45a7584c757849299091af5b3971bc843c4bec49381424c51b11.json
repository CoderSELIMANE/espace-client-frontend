{"ast":null,"code":"/**\n * Utilitaires pour la gestion des permissions dans l'espace client\n */\n// import { hasPermission, getUserRole, PERMISSION_CONFIG } from '../config/permissions';\n\n/**\n * Vérifie si l'utilisateur est un administrateur\n * @param {Object} user - L'objet utilisateur\n * @returns {boolean} - True si l'utilisateur est un administrateur\n */\nexport const isAdmin = user => {\n  if (!user) return false;\n\n  // Vérifications multiples pour être sûr\n  const isSuperUser = user.is_superuser === true;\n  const isStaff = user.is_staff === true;\n  const isAdminProfile = user.profile && user.profile.user_type === 'admin';\n  const isAdminRole = user.role === 'admin';\n  const isAdminType = user.user_type === 'admin';\n  return isSuperUser || isStaff || isAdminProfile || isAdminRole || isAdminType;\n};\n\n/**\n * Vérifie si l'utilisateur est un bibliothécaire\n * @param {Object} user - L'objet utilisateur\n * @returns {boolean} - True si l'utilisateur est un bibliothécaire\n */\nexport const isLibrarian = user => {\n  if (!user) return false;\n  return user.profile && user.profile.user_type === 'bibliothecaire';\n};\n\n/**\n * Vérifie si l'utilisateur peut ajouter des documents\n * @param {Object} user - L'objet utilisateur\n * @returns {boolean} - True si l'utilisateur peut ajouter des documents\n */\nexport const canAddDocuments = user => {\n  if (!user) return false;\n\n  // Solution temporaire : permettre aux utilisateurs avec certains emails d'être admin\n  const adminEmails = ['azize@gmail.com', 'admin@gmail.com'];\n  if (adminEmails.includes(user.email)) {\n    return true;\n  }\n\n  // NOUVELLE RÈGLE : Seuls les admins peuvent ajouter des documents\n  return isAdmin(user);\n};\n\n/**\n * Vérifie si l'utilisateur peut modifier des documents\n * @param {Object} user - L'objet utilisateur\n * @returns {boolean} - True si l'utilisateur peut modifier des documents\n */\nexport const canEditDocuments = user => {\n  if (!user) return false;\n\n  // Solution temporaire : permettre aux utilisateurs avec certains emails d'être admin\n  const adminEmails = ['azize@gmail.com', 'admin@gmail.com'];\n  if (adminEmails.includes(user.email)) {\n    return true;\n  }\n\n  // NOUVELLE RÈGLE : Seuls les admins peuvent modifier des documents\n  return isAdmin(user);\n};\n\n/**\n * Vérifie si l'utilisateur peut supprimer des documents\n * @param {Object} user - L'objet utilisateur\n * @returns {boolean} - True si l'utilisateur peut supprimer des documents\n */\nexport const canDeleteDocuments = user => {\n  if (!user) return false;\n\n  // Solution temporaire : permettre aux utilisateurs avec certains emails d'être admin\n  const adminEmails = ['azize@gmail.com', 'admin@gmail.com'];\n  if (adminEmails.includes(user.email)) {\n    return true;\n  }\n\n  // NOUVELLE RÈGLE : Seuls les admins peuvent supprimer des documents\n  return isAdmin(user);\n};\n\n/**\n * Vérifie si l'utilisateur peut consulter des documents\n * @param {Object} user - L'objet utilisateur\n * @returns {boolean} - True si l'utilisateur peut consulter des documents\n */\nexport const canViewDocuments = user => {\n  // NOUVELLE RÈGLE : Tous les utilisateurs connectés peuvent lire les documents\n  return user !== null && user !== undefined;\n};\n\n/**\n * Vérifie si l'utilisateur peut télécharger des documents\n * @param {Object} user - L'objet utilisateur\n * @returns {boolean} - True si l'utilisateur peut télécharger des documents\n */\nexport const canDownloadDocuments = user => {\n  // NOUVELLE RÈGLE : Tous les utilisateurs connectés peuvent télécharger les documents\n  return user !== null && user !== undefined;\n};\n\n/**\n * Vérifie si l'utilisateur est un étudiant/utilisateur normal\n * @param {Object} user - L'objet utilisateur\n * @returns {boolean} - True si l'utilisateur est un étudiant\n */\nexport const isStudent = user => {\n  if (!user) return false;\n  return !isAdmin(user) && !isLibrarian(user);\n};\n\n/**\n * Obtient le type d'utilisateur pour l'affichage\n * @param {Object} user - L'objet utilisateur\n * @returns {string} - Le type d'utilisateur\n */\nexport const getUserType = user => {\n  if (!user) return 'Invité';\n\n  // Vérification par email pour les admins connus\n  const adminEmails = ['azize@gmail.com', 'admin@gmail.com'];\n  if (adminEmails.includes(user.email)) {\n    return 'Administrateur';\n  }\n  if (isAdmin(user)) return 'Administrateur';\n  if (isLibrarian(user)) return 'Bibliothécaire';\n  return 'Utilisateur';\n};\n\n/**\n * Obtient les permissions de l'utilisateur\n * @param {Object} user - L'objet utilisateur\n * @returns {Object} - Objet contenant les permissions\n */\nexport const getUserPermissions = user => {\n  return {\n    canAdd: canAddDocuments(user),\n    canEdit: canEditDocuments(user),\n    canDelete: canDeleteDocuments(user),\n    canView: canViewDocuments(user),\n    canDownload: canDownloadDocuments(user),\n    isAdmin: isAdmin(user),\n    isLibrarian: isLibrarian(user),\n    isStudent: isStudent(user),\n    userType: getUserType(user)\n  };\n};","map":{"version":3,"names":["isAdmin","user","isSuperUser","is_superuser","isStaff","is_staff","isAdminProfile","profile","user_type","isAdminRole","role","isAdminType","isLibrarian","canAddDocuments","adminEmails","includes","email","canEditDocuments","canDeleteDocuments","canViewDocuments","undefined","canDownloadDocuments","isStudent","getUserType","getUserPermissions","canAdd","canEdit","canDelete","canView","canDownload","userType"],"sources":["C:/Users/PC/Desktop/modifier/Gestion_bibliotheque/espace_client_app/frontend/src/utils/permissions.js"],"sourcesContent":["/**\n * Utilitaires pour la gestion des permissions dans l'espace client\n */\n// import { hasPermission, getUserRole, PERMISSION_CONFIG } from '../config/permissions';\n\n/**\n * Vérifie si l'utilisateur est un administrateur\n * @param {Object} user - L'objet utilisateur\n * @returns {boolean} - True si l'utilisateur est un administrateur\n */\nexport const isAdmin = (user) => {\n  if (!user) return false;\n\n  // Vérifications multiples pour être sûr\n  const isSuperUser = user.is_superuser === true;\n  const isStaff = user.is_staff === true;\n  const isAdminProfile = user.profile && user.profile.user_type === 'admin';\n  const isAdminRole = user.role === 'admin';\n  const isAdminType = user.user_type === 'admin';\n\n  return isSuperUser || isStaff || isAdminProfile || isAdminRole || isAdminType;\n};\n\n/**\n * Vérifie si l'utilisateur est un bibliothécaire\n * @param {Object} user - L'objet utilisateur\n * @returns {boolean} - True si l'utilisateur est un bibliothécaire\n */\nexport const isLibrarian = (user) => {\n  if (!user) return false;\n  return user.profile && user.profile.user_type === 'bibliothecaire';\n};\n\n/**\n * Vérifie si l'utilisateur peut ajouter des documents\n * @param {Object} user - L'objet utilisateur\n * @returns {boolean} - True si l'utilisateur peut ajouter des documents\n */\nexport const canAddDocuments = (user) => {\n  if (!user) return false;\n\n  // Solution temporaire : permettre aux utilisateurs avec certains emails d'être admin\n  const adminEmails = ['azize@gmail.com', 'admin@gmail.com'];\n  if (adminEmails.includes(user.email)) {\n    return true;\n  }\n\n  // NOUVELLE RÈGLE : Seuls les admins peuvent ajouter des documents\n  return isAdmin(user);\n};\n\n/**\n * Vérifie si l'utilisateur peut modifier des documents\n * @param {Object} user - L'objet utilisateur\n * @returns {boolean} - True si l'utilisateur peut modifier des documents\n */\nexport const canEditDocuments = (user) => {\n  if (!user) return false;\n\n  // Solution temporaire : permettre aux utilisateurs avec certains emails d'être admin\n  const adminEmails = ['azize@gmail.com', 'admin@gmail.com'];\n  if (adminEmails.includes(user.email)) {\n    return true;\n  }\n\n  // NOUVELLE RÈGLE : Seuls les admins peuvent modifier des documents\n  return isAdmin(user);\n};\n\n/**\n * Vérifie si l'utilisateur peut supprimer des documents\n * @param {Object} user - L'objet utilisateur\n * @returns {boolean} - True si l'utilisateur peut supprimer des documents\n */\nexport const canDeleteDocuments = (user) => {\n  if (!user) return false;\n\n  // Solution temporaire : permettre aux utilisateurs avec certains emails d'être admin\n  const adminEmails = ['azize@gmail.com', 'admin@gmail.com'];\n  if (adminEmails.includes(user.email)) {\n    return true;\n  }\n\n  // NOUVELLE RÈGLE : Seuls les admins peuvent supprimer des documents\n  return isAdmin(user);\n};\n\n/**\n * Vérifie si l'utilisateur peut consulter des documents\n * @param {Object} user - L'objet utilisateur\n * @returns {boolean} - True si l'utilisateur peut consulter des documents\n */\nexport const canViewDocuments = (user) => {\n  // NOUVELLE RÈGLE : Tous les utilisateurs connectés peuvent lire les documents\n  return user !== null && user !== undefined;\n};\n\n/**\n * Vérifie si l'utilisateur peut télécharger des documents\n * @param {Object} user - L'objet utilisateur\n * @returns {boolean} - True si l'utilisateur peut télécharger des documents\n */\nexport const canDownloadDocuments = (user) => {\n  // NOUVELLE RÈGLE : Tous les utilisateurs connectés peuvent télécharger les documents\n  return user !== null && user !== undefined;\n};\n\n/**\n * Vérifie si l'utilisateur est un étudiant/utilisateur normal\n * @param {Object} user - L'objet utilisateur\n * @returns {boolean} - True si l'utilisateur est un étudiant\n */\nexport const isStudent = (user) => {\n  if (!user) return false;\n  return !isAdmin(user) && !isLibrarian(user);\n};\n\n/**\n * Obtient le type d'utilisateur pour l'affichage\n * @param {Object} user - L'objet utilisateur\n * @returns {string} - Le type d'utilisateur\n */\nexport const getUserType = (user) => {\n  if (!user) return 'Invité';\n\n  // Vérification par email pour les admins connus\n  const adminEmails = ['azize@gmail.com', 'admin@gmail.com'];\n  if (adminEmails.includes(user.email)) {\n    return 'Administrateur';\n  }\n\n  if (isAdmin(user)) return 'Administrateur';\n  if (isLibrarian(user)) return 'Bibliothécaire';\n  return 'Utilisateur';\n};\n\n/**\n * Obtient les permissions de l'utilisateur\n * @param {Object} user - L'objet utilisateur\n * @returns {Object} - Objet contenant les permissions\n */\nexport const getUserPermissions = (user) => {\n  return {\n    canAdd: canAddDocuments(user),\n    canEdit: canEditDocuments(user),\n    canDelete: canDeleteDocuments(user),\n    canView: canViewDocuments(user),\n    canDownload: canDownloadDocuments(user),\n    isAdmin: isAdmin(user),\n    isLibrarian: isLibrarian(user),\n    isStudent: isStudent(user),\n    userType: getUserType(user)\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}