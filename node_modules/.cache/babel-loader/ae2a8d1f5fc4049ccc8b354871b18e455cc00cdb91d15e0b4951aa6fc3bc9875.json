{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useApp } from '../contexts/AppContext';\nimport authService from '../services/authService';\n\n/**\n * Hook personnalisé pour gérer l'authentification\n * Assure que l'utilisateur est connecté et charge ses données\n */\nconst useAuth = (redirectTo = '/login') => {\n  _s();\n  const [isLoading, setIsLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const {\n    state,\n    actions\n  } = useApp();\n  const navigate = useNavigate();\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        setIsLoading(true);\n\n        // Vérifier si l'utilisateur est authentifié\n        if (!authService.isAuthenticated()) {\n          setIsAuthenticated(false);\n          navigate(redirectTo);\n          return;\n        }\n        setIsAuthenticated(true);\n\n        // Si pas d'utilisateur dans le state, le charger\n        if (!state.user) {\n          try {\n            await actions.loadUser();\n          } catch (error) {\n            console.error('Erreur lors du chargement de l\\'utilisateur:', error);\n            // Si le chargement échoue, vérifier à nouveau l'authentification\n            if (!authService.isAuthenticated()) {\n              setIsAuthenticated(false);\n              navigate(redirectTo);\n              return;\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Erreur lors de la vérification d\\'authentification:', error);\n        setIsAuthenticated(false);\n        navigate(redirectTo);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    checkAuth();\n  }, [navigate, redirectTo, actions, state.user]);\n  return {\n    isLoading,\n    isAuthenticated,\n    user: state.user\n  };\n};\n_s(useAuth, \"uqw5Sb87rrC79XmpgMiPwrEmqKY=\", false, function () {\n  return [useApp, useNavigate];\n});\nexport default useAuth;","map":{"version":3,"names":["useEffect","useState","useNavigate","useApp","authService","useAuth","redirectTo","_s","isLoading","setIsLoading","isAuthenticated","setIsAuthenticated","state","actions","navigate","checkAuth","user","loadUser","error","console"],"sources":["C:/Users/PC/Desktop/modifier/Gestion_bibliotheque/espace_client_app/frontend/src/hooks/useAuth.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useApp } from '../contexts/AppContext';\nimport authService from '../services/authService';\n\n/**\n * Hook personnalisé pour gérer l'authentification\n * Assure que l'utilisateur est connecté et charge ses données\n */\nconst useAuth = (redirectTo = '/login') => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const { state, actions } = useApp();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      try {\n        setIsLoading(true);\n\n        // Vérifier si l'utilisateur est authentifié\n        if (!authService.isAuthenticated()) {\n          setIsAuthenticated(false);\n          navigate(redirectTo);\n          return;\n        }\n\n        setIsAuthenticated(true);\n\n        // Si pas d'utilisateur dans le state, le charger\n        if (!state.user) {\n          try {\n            await actions.loadUser();\n          } catch (error) {\n            console.error('Erreur lors du chargement de l\\'utilisateur:', error);\n            // Si le chargement échoue, vérifier à nouveau l'authentification\n            if (!authService.isAuthenticated()) {\n              setIsAuthenticated(false);\n              navigate(redirectTo);\n              return;\n            }\n          }\n        }\n\n      } catch (error) {\n        console.error('Erreur lors de la vérification d\\'authentification:', error);\n        setIsAuthenticated(false);\n        navigate(redirectTo);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    checkAuth();\n  }, [navigate, redirectTo, actions, state.user]);\n\n  return {\n    isLoading,\n    isAuthenticated,\n    user: state.user\n  };\n};\n\nexport default useAuth;\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,MAAM,QAAQ,wBAAwB;AAC/C,OAAOC,WAAW,MAAM,yBAAyB;;AAEjD;AACA;AACA;AACA;AACA,MAAMC,OAAO,GAAGA,CAACC,UAAU,GAAG,QAAQ,KAAK;EAAAC,EAAA;EACzC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACS,eAAe,EAAEC,kBAAkB,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM;IAAEW,KAAK;IAAEC;EAAQ,CAAC,GAAGV,MAAM,CAAC,CAAC;EACnC,MAAMW,QAAQ,GAAGZ,WAAW,CAAC,CAAC;EAE9BF,SAAS,CAAC,MAAM;IACd,MAAMe,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACFN,YAAY,CAAC,IAAI,CAAC;;QAElB;QACA,IAAI,CAACL,WAAW,CAACM,eAAe,CAAC,CAAC,EAAE;UAClCC,kBAAkB,CAAC,KAAK,CAAC;UACzBG,QAAQ,CAACR,UAAU,CAAC;UACpB;QACF;QAEAK,kBAAkB,CAAC,IAAI,CAAC;;QAExB;QACA,IAAI,CAACC,KAAK,CAACI,IAAI,EAAE;UACf,IAAI;YACF,MAAMH,OAAO,CAACI,QAAQ,CAAC,CAAC;UAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;YACdC,OAAO,CAACD,KAAK,CAAC,8CAA8C,EAAEA,KAAK,CAAC;YACpE;YACA,IAAI,CAACd,WAAW,CAACM,eAAe,CAAC,CAAC,EAAE;cAClCC,kBAAkB,CAAC,KAAK,CAAC;cACzBG,QAAQ,CAACR,UAAU,CAAC;cACpB;YACF;UACF;QACF;MAEF,CAAC,CAAC,OAAOY,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,qDAAqD,EAAEA,KAAK,CAAC;QAC3EP,kBAAkB,CAAC,KAAK,CAAC;QACzBG,QAAQ,CAACR,UAAU,CAAC;MACtB,CAAC,SAAS;QACRG,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAEDM,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACD,QAAQ,EAAER,UAAU,EAAEO,OAAO,EAAED,KAAK,CAACI,IAAI,CAAC,CAAC;EAE/C,OAAO;IACLR,SAAS;IACTE,eAAe;IACfM,IAAI,EAAEJ,KAAK,CAACI;EACd,CAAC;AACH,CAAC;AAACT,EAAA,CApDIF,OAAO;EAAA,QAGgBF,MAAM,EAChBD,WAAW;AAAA;AAkD9B,eAAeG,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}