{"ast":null,"code":"/**\n * Utilitaires pour la gestion des permissions dans l'espace client\n */// import { hasPermission, getUserRole, PERMISSION_CONFIG } from '../config/permissions';\n/**\n * Vérifie si l'utilisateur est un administrateur\n * @param {Object} user - L'objet utilisateur\n * @returns {boolean} - True si l'utilisateur est un administrateur\n */export const isAdmin=user=>{if(!user)return false;// Vérifications multiples pour être sûr\nconst isSuperUser=user.is_superuser===true;const isStaff=user.is_staff===true;const isAdminProfile=user.profile&&user.profile.user_type==='admin';const isAdminRole=user.role==='admin';const isAdminType=user.user_type==='admin';return isSuperUser||isStaff||isAdminProfile||isAdminRole||isAdminType;};/**\n * Vérifie si l'utilisateur est un bibliothécaire\n * @param {Object} user - L'objet utilisateur\n * @returns {boolean} - True si l'utilisateur est un bibliothécaire\n */export const isLibrarian=user=>{if(!user)return false;return user.profile&&user.profile.user_type==='bibliothecaire';};/**\n * Vérifie si l'utilisateur peut ajouter des documents\n * @param {Object} user - L'objet utilisateur\n * @returns {boolean} - True si l'utilisateur peut ajouter des documents\n */export const canAddDocuments=user=>{if(!user)return false;// Solution temporaire : permettre aux utilisateurs avec certains emails d'être admin\nconst adminEmails=['azize@gmail.com','admin@gmail.com'];if(adminEmails.includes(user.email)){return true;}// NOUVELLE RÈGLE : Seuls les admins peuvent ajouter des documents\nreturn isAdmin(user);};/**\n * Vérifie si l'utilisateur peut modifier des documents\n * @param {Object} user - L'objet utilisateur\n * @returns {boolean} - True si l'utilisateur peut modifier des documents\n */export const canEditDocuments=user=>{if(!user)return false;// Solution temporaire : permettre aux utilisateurs avec certains emails d'être admin\nconst adminEmails=['azize@gmail.com','admin@gmail.com'];if(adminEmails.includes(user.email)){return true;}// NOUVELLE RÈGLE : Seuls les admins peuvent modifier des documents\nreturn isAdmin(user);};/**\n * Vérifie si l'utilisateur peut supprimer des documents\n * @param {Object} user - L'objet utilisateur\n * @returns {boolean} - True si l'utilisateur peut supprimer des documents\n */export const canDeleteDocuments=user=>{if(!user)return false;// Solution temporaire : permettre aux utilisateurs avec certains emails d'être admin\nconst adminEmails=['azize@gmail.com','admin@gmail.com'];if(adminEmails.includes(user.email)){return true;}// NOUVELLE RÈGLE : Seuls les admins peuvent supprimer des documents\nreturn isAdmin(user);};/**\n * Vérifie si l'utilisateur peut consulter des documents\n * @param {Object} user - L'objet utilisateur\n * @returns {boolean} - True si l'utilisateur peut consulter des documents\n */export const canViewDocuments=user=>{// NOUVELLE RÈGLE : Tous les utilisateurs connectés peuvent lire les documents\nreturn user!==null&&user!==undefined;};/**\n * Vérifie si l'utilisateur peut télécharger des documents\n * @param {Object} user - L'objet utilisateur\n * @returns {boolean} - True si l'utilisateur peut télécharger des documents\n */export const canDownloadDocuments=user=>{// NOUVELLE RÈGLE : Tous les utilisateurs connectés peuvent télécharger les documents\nreturn user!==null&&user!==undefined;};/**\n * Vérifie si l'utilisateur est un étudiant/utilisateur normal\n * @param {Object} user - L'objet utilisateur\n * @returns {boolean} - True si l'utilisateur est un étudiant\n */export const isStudent=user=>{if(!user)return false;return!isAdmin(user)&&!isLibrarian(user);};/**\n * Obtient le type d'utilisateur pour l'affichage\n * @param {Object} user - L'objet utilisateur\n * @returns {string} - Le type d'utilisateur\n */export const getUserType=user=>{if(!user)return'Invité';// Vérification par email pour les admins connus\nconst adminEmails=['azize@gmail.com','admin@gmail.com'];if(adminEmails.includes(user.email)){return'Administrateur';}if(isAdmin(user))return'Administrateur';if(isLibrarian(user))return'Bibliothécaire';return'Utilisateur';};/**\n * Obtient les permissions de l'utilisateur\n * @param {Object} user - L'objet utilisateur\n * @returns {Object} - Objet contenant les permissions\n */export const getUserPermissions=user=>{return{canAdd:canAddDocuments(user),canEdit:canEditDocuments(user),canDelete:canDeleteDocuments(user),canView:canViewDocuments(user),canDownload:canDownloadDocuments(user),isAdmin:isAdmin(user),isLibrarian:isLibrarian(user),isStudent:isStudent(user),userType:getUserType(user)};};","map":{"version":3,"names":["isAdmin","user","isSuperUser","is_superuser","isStaff","is_staff","isAdminProfile","profile","user_type","isAdminRole","role","isAdminType","isLibrarian","canAddDocuments","adminEmails","includes","email","canEditDocuments","canDeleteDocuments","canViewDocuments","undefined","canDownloadDocuments","isStudent","getUserType","getUserPermissions","canAdd","canEdit","canDelete","canView","canDownload","userType"],"sources":["C:/Users/PC/Desktop/modifier/Gestion_bibliotheque/espace_client_app/frontend/src/utils/permissions.js"],"sourcesContent":["/**\n * Utilitaires pour la gestion des permissions dans l'espace client\n */\n// import { hasPermission, getUserRole, PERMISSION_CONFIG } from '../config/permissions';\n\n/**\n * Vérifie si l'utilisateur est un administrateur\n * @param {Object} user - L'objet utilisateur\n * @returns {boolean} - True si l'utilisateur est un administrateur\n */\nexport const isAdmin = (user) => {\n  if (!user) return false;\n\n  // Vérifications multiples pour être sûr\n  const isSuperUser = user.is_superuser === true;\n  const isStaff = user.is_staff === true;\n  const isAdminProfile = user.profile && user.profile.user_type === 'admin';\n  const isAdminRole = user.role === 'admin';\n  const isAdminType = user.user_type === 'admin';\n\n  return isSuperUser || isStaff || isAdminProfile || isAdminRole || isAdminType;\n};\n\n/**\n * Vérifie si l'utilisateur est un bibliothécaire\n * @param {Object} user - L'objet utilisateur\n * @returns {boolean} - True si l'utilisateur est un bibliothécaire\n */\nexport const isLibrarian = (user) => {\n  if (!user) return false;\n  return user.profile && user.profile.user_type === 'bibliothecaire';\n};\n\n/**\n * Vérifie si l'utilisateur peut ajouter des documents\n * @param {Object} user - L'objet utilisateur\n * @returns {boolean} - True si l'utilisateur peut ajouter des documents\n */\nexport const canAddDocuments = (user) => {\n  if (!user) return false;\n\n  // Solution temporaire : permettre aux utilisateurs avec certains emails d'être admin\n  const adminEmails = ['azize@gmail.com', 'admin@gmail.com'];\n  if (adminEmails.includes(user.email)) {\n    return true;\n  }\n\n  // NOUVELLE RÈGLE : Seuls les admins peuvent ajouter des documents\n  return isAdmin(user);\n};\n\n/**\n * Vérifie si l'utilisateur peut modifier des documents\n * @param {Object} user - L'objet utilisateur\n * @returns {boolean} - True si l'utilisateur peut modifier des documents\n */\nexport const canEditDocuments = (user) => {\n  if (!user) return false;\n\n  // Solution temporaire : permettre aux utilisateurs avec certains emails d'être admin\n  const adminEmails = ['azize@gmail.com', 'admin@gmail.com'];\n  if (adminEmails.includes(user.email)) {\n    return true;\n  }\n\n  // NOUVELLE RÈGLE : Seuls les admins peuvent modifier des documents\n  return isAdmin(user);\n};\n\n/**\n * Vérifie si l'utilisateur peut supprimer des documents\n * @param {Object} user - L'objet utilisateur\n * @returns {boolean} - True si l'utilisateur peut supprimer des documents\n */\nexport const canDeleteDocuments = (user) => {\n  if (!user) return false;\n\n  // Solution temporaire : permettre aux utilisateurs avec certains emails d'être admin\n  const adminEmails = ['azize@gmail.com', 'admin@gmail.com'];\n  if (adminEmails.includes(user.email)) {\n    return true;\n  }\n\n  // NOUVELLE RÈGLE : Seuls les admins peuvent supprimer des documents\n  return isAdmin(user);\n};\n\n/**\n * Vérifie si l'utilisateur peut consulter des documents\n * @param {Object} user - L'objet utilisateur\n * @returns {boolean} - True si l'utilisateur peut consulter des documents\n */\nexport const canViewDocuments = (user) => {\n  // NOUVELLE RÈGLE : Tous les utilisateurs connectés peuvent lire les documents\n  return user !== null && user !== undefined;\n};\n\n/**\n * Vérifie si l'utilisateur peut télécharger des documents\n * @param {Object} user - L'objet utilisateur\n * @returns {boolean} - True si l'utilisateur peut télécharger des documents\n */\nexport const canDownloadDocuments = (user) => {\n  // NOUVELLE RÈGLE : Tous les utilisateurs connectés peuvent télécharger les documents\n  return user !== null && user !== undefined;\n};\n\n/**\n * Vérifie si l'utilisateur est un étudiant/utilisateur normal\n * @param {Object} user - L'objet utilisateur\n * @returns {boolean} - True si l'utilisateur est un étudiant\n */\nexport const isStudent = (user) => {\n  if (!user) return false;\n  return !isAdmin(user) && !isLibrarian(user);\n};\n\n/**\n * Obtient le type d'utilisateur pour l'affichage\n * @param {Object} user - L'objet utilisateur\n * @returns {string} - Le type d'utilisateur\n */\nexport const getUserType = (user) => {\n  if (!user) return 'Invité';\n\n  // Vérification par email pour les admins connus\n  const adminEmails = ['azize@gmail.com', 'admin@gmail.com'];\n  if (adminEmails.includes(user.email)) {\n    return 'Administrateur';\n  }\n\n  if (isAdmin(user)) return 'Administrateur';\n  if (isLibrarian(user)) return 'Bibliothécaire';\n  return 'Utilisateur';\n};\n\n/**\n * Obtient les permissions de l'utilisateur\n * @param {Object} user - L'objet utilisateur\n * @returns {Object} - Objet contenant les permissions\n */\nexport const getUserPermissions = (user) => {\n  return {\n    canAdd: canAddDocuments(user),\n    canEdit: canEditDocuments(user),\n    canDelete: canDeleteDocuments(user),\n    canView: canViewDocuments(user),\n    canDownload: canDownloadDocuments(user),\n    isAdmin: isAdmin(user),\n    isLibrarian: isLibrarian(user),\n    isStudent: isStudent(user),\n    userType: getUserType(user)\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}