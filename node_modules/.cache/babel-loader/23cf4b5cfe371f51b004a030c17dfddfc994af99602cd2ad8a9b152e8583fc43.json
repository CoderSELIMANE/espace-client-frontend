{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\Desktop\\\\modifier\\\\Gestion_bibliotheque\\\\espace_client_app\\\\frontend\\\\src\\\\contexts\\\\AppContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\n\n// Initial state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  theme: localStorage.getItem('theme') || 'light',\n  notifications: [],\n  loading: false,\n  user: (() => {\n    // Essayer de charger l'utilisateur depuis le localStorage au démarrage\n    try {\n      const storedUser = localStorage.getItem('user');\n      return storedUser ? JSON.parse(storedUser) : null;\n    } catch (error) {\n      console.error('Erreur lors du chargement de l\\'utilisateur depuis localStorage:', error);\n      return null;\n    }\n  })(),\n  documents: [],\n  searchQuery: '',\n  selectedFilter: 'all',\n  stats: {\n    totalDocuments: 0,\n    totalSize: 0,\n    recentUploads: 0\n  }\n};\n\n// Action types\nconst ActionTypes = {\n  SET_THEME: 'SET_THEME',\n  ADD_NOTIFICATION: 'ADD_NOTIFICATION',\n  REMOVE_NOTIFICATION: 'REMOVE_NOTIFICATION',\n  SET_LOADING: 'SET_LOADING',\n  SET_USER: 'SET_USER',\n  SET_DOCUMENTS: 'SET_DOCUMENTS',\n  ADD_DOCUMENT: 'ADD_DOCUMENT',\n  UPDATE_DOCUMENT: 'UPDATE_DOCUMENT',\n  REMOVE_DOCUMENT: 'REMOVE_DOCUMENT',\n  SET_SEARCH_QUERY: 'SET_SEARCH_QUERY',\n  SET_FILTER: 'SET_FILTER',\n  UPDATE_STATS: 'UPDATE_STATS'\n};\n\n// Reducer\nconst appReducer = (state, action) => {\n  switch (action.type) {\n    case ActionTypes.SET_THEME:\n      localStorage.setItem('theme', action.payload);\n      document.documentElement.setAttribute('data-theme', action.payload);\n      return {\n        ...state,\n        theme: action.payload\n      };\n    case ActionTypes.ADD_NOTIFICATION:\n      return {\n        ...state,\n        notifications: [...state.notifications, {\n          id: Date.now(),\n          ...action.payload\n        }]\n      };\n    case ActionTypes.REMOVE_NOTIFICATION:\n      return {\n        ...state,\n        notifications: state.notifications.filter(n => n.id !== action.payload)\n      };\n    case ActionTypes.SET_LOADING:\n      return {\n        ...state,\n        loading: action.payload\n      };\n    case ActionTypes.SET_USER:\n      return {\n        ...state,\n        user: action.payload\n      };\n    case ActionTypes.SET_DOCUMENTS:\n      return {\n        ...state,\n        documents: Array.isArray(action.payload) ? action.payload : []\n      };\n    case ActionTypes.ADD_DOCUMENT:\n      return {\n        ...state,\n        documents: [action.payload, ...(Array.isArray(state.documents) ? state.documents : [])]\n      };\n    case ActionTypes.UPDATE_DOCUMENT:\n      return {\n        ...state,\n        documents: Array.isArray(state.documents) ? state.documents.map(doc => doc.id === action.payload.id ? action.payload : doc) : []\n      };\n    case ActionTypes.REMOVE_DOCUMENT:\n      return {\n        ...state,\n        documents: Array.isArray(state.documents) ? state.documents.filter(doc => doc.id !== action.payload) : []\n      };\n    case ActionTypes.SET_SEARCH_QUERY:\n      return {\n        ...state,\n        searchQuery: action.payload\n      };\n    case ActionTypes.SET_FILTER:\n      return {\n        ...state,\n        selectedFilter: action.payload\n      };\n    case ActionTypes.UPDATE_STATS:\n      return {\n        ...state,\n        stats: {\n          ...state.stats,\n          ...action.payload\n        }\n      };\n    default:\n      return state;\n  }\n};\n\n// Context\nconst AppContext = /*#__PURE__*/createContext();\n\n// Provider component\nexport const AppProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(appReducer, initialState);\n\n  // Initialize theme on mount\n  useEffect(() => {\n    document.documentElement.setAttribute('data-theme', state.theme);\n  }, []);\n\n  // Auto-remove notifications after 5 seconds\n  useEffect(() => {\n    state.notifications.forEach(notification => {\n      if (notification.autoRemove !== false) {\n        setTimeout(() => {\n          dispatch({\n            type: ActionTypes.REMOVE_NOTIFICATION,\n            payload: notification.id\n          });\n        }, 5000);\n      }\n    });\n  }, [state.notifications]);\n\n  // Actions\n  const actions = {\n    toggleTheme: () => {\n      const newTheme = state.theme === 'light' ? 'dark' : 'light';\n      dispatch({\n        type: ActionTypes.SET_THEME,\n        payload: newTheme\n      });\n    },\n    showNotification: (type, message, title = '') => {\n      dispatch({\n        type: ActionTypes.ADD_NOTIFICATION,\n        payload: {\n          type,\n          message,\n          title\n        }\n      });\n    },\n    removeNotification: id => {\n      dispatch({\n        type: ActionTypes.REMOVE_NOTIFICATION,\n        payload: id\n      });\n    },\n    setLoading: loading => {\n      dispatch({\n        type: ActionTypes.SET_LOADING,\n        payload: loading\n      });\n    },\n    setUser: user => {\n      dispatch({\n        type: ActionTypes.SET_USER,\n        payload: user\n      });\n    },\n    // Charger l'utilisateur depuis le localStorage ou l'API\n    loadUser: async () => {\n      try {\n        // D'abord, essayer de charger depuis le localStorage\n        const storedUser = localStorage.getItem('user');\n        if (storedUser) {\n          const user = JSON.parse(storedUser);\n          dispatch({\n            type: ActionTypes.SET_USER,\n            payload: user\n          });\n\n          // Ensuite, essayer de récupérer les données à jour depuis l'API\n          try {\n            const authService = await import('../services/authService');\n            const updatedUser = await authService.default.getProfile();\n            dispatch({\n              type: ActionTypes.SET_USER,\n              payload: updatedUser\n            });\n          } catch (apiError) {\n            // Si l'API échoue, on garde les données du localStorage\n            console.warn('Impossible de récupérer le profil depuis l\\'API:', apiError);\n          }\n        } else {\n          // Si pas de données dans localStorage, essayer l'API\n          const authService = await import('../services/authService');\n          const user = await authService.default.getProfile();\n          dispatch({\n            type: ActionTypes.SET_USER,\n            payload: user\n          });\n        }\n      } catch (error) {\n        console.error('Erreur lors du chargement de l\\'utilisateur:', error);\n        // Si tout échoue et qu'on est censé être connecté, rediriger vers login\n        const authService = await import('../services/authService');\n        if (!authService.default.isAuthenticated()) {\n          window.location.href = '/login';\n        }\n      }\n    },\n    setDocuments: documents => {\n      const documentsArray = Array.isArray(documents) ? documents : [];\n      dispatch({\n        type: ActionTypes.SET_DOCUMENTS,\n        payload: documentsArray\n      });\n\n      // Update stats\n      const totalSize = documentsArray.reduce((sum, doc) => sum + (doc.file_size || 0), 0);\n      const recentUploads = documentsArray.filter(doc => {\n        const uploadDate = new Date(doc.uploaded_at);\n        const weekAgo = new Date();\n        weekAgo.setDate(weekAgo.getDate() - 7);\n        return uploadDate > weekAgo;\n      }).length;\n      dispatch({\n        type: ActionTypes.UPDATE_STATS,\n        payload: {\n          totalDocuments: documentsArray.length,\n          totalSize,\n          recentUploads\n        }\n      });\n    },\n    // Charger les documents depuis l'API\n    loadDocuments: async () => {\n      try {\n        const documentService = await import('../services/documentService');\n        const documents = await documentService.default.getDocuments();\n        dispatch({\n          type: ActionTypes.SET_DOCUMENTS,\n          payload: documents\n        });\n\n        // Update stats\n        const totalSize = documents.reduce((sum, doc) => sum + (doc.file_size || 0), 0);\n        const recentUploads = documents.filter(doc => {\n          const uploadDate = new Date(doc.uploaded_at || doc.created_at);\n          const weekAgo = new Date();\n          weekAgo.setDate(weekAgo.getDate() - 7);\n          return uploadDate > weekAgo;\n        }).length;\n        dispatch({\n          type: ActionTypes.UPDATE_STATS,\n          payload: {\n            totalDocuments: documents.length,\n            totalSize,\n            recentUploads\n          }\n        });\n      } catch (error) {\n        console.error('Erreur lors du chargement des documents:', error);\n        actions.showNotification('error', 'Erreur lors du chargement des documents');\n      }\n    },\n    addDocument: document => {\n      dispatch({\n        type: ActionTypes.ADD_DOCUMENT,\n        payload: document\n      });\n      actions.showNotification('success', 'Document ajouté avec succès', 'Succès');\n    },\n    // Mettre à jour un document\n    updateDocument: document => {\n      dispatch({\n        type: ActionTypes.UPDATE_DOCUMENT,\n        payload: document\n      });\n      actions.showNotification('success', 'Document modifié avec succès', 'Succès');\n    },\n    // Supprimer un document\n    deleteDocument: async documentId => {\n      try {\n        const documentService = await import('../services/documentService');\n        await documentService.default.deleteDocument(documentId);\n        dispatch({\n          type: ActionTypes.REMOVE_DOCUMENT,\n          payload: documentId\n        });\n        actions.showNotification('success', 'Document supprimé avec succès');\n      } catch (error) {\n        console.error('Erreur lors de la suppression:', error);\n        actions.showNotification('error', 'Erreur lors de la suppression du document');\n        throw error;\n      }\n    },\n    removeDocument: id => {\n      dispatch({\n        type: ActionTypes.REMOVE_DOCUMENT,\n        payload: id\n      });\n      actions.showNotification('success', 'Document supprimé avec succès', 'Succès');\n    },\n    setSearchQuery: query => {\n      dispatch({\n        type: ActionTypes.SET_SEARCH_QUERY,\n        payload: query\n      });\n    },\n    setFilter: filter => {\n      dispatch({\n        type: ActionTypes.SET_FILTER,\n        payload: filter\n      });\n    },\n    // Filtered documents based on search and filter\n    getFilteredDocuments: () => {\n      // S'assurer que documents est un tableau\n      let filtered = Array.isArray(state.documents) ? state.documents : [];\n\n      // Apply search filter\n      if (state.searchQuery) {\n        const query = state.searchQuery.toLowerCase();\n        filtered = filtered.filter(doc => doc.title.toLowerCase().includes(query) || doc.description.toLowerCase().includes(query));\n      }\n\n      // Apply type filter\n      if (state.selectedFilter !== 'all') {\n        filtered = filtered.filter(doc => doc.document_type === state.selectedFilter);\n      }\n      return filtered;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      state,\n      actions\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 312,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the context\n_s(AppProvider, \"GUSXxL/WUElrtHc/X73NyHNRMdw=\");\n_c = AppProvider;\nexport const useApp = () => {\n  _s2();\n  const context = useContext(AppContext);\n  if (!context) {\n    throw new Error('useApp must be used within an AppProvider');\n  }\n  return context;\n};\n_s2(useApp, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AppContext;\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","jsxDEV","_jsxDEV","initialState","theme","localStorage","getItem","notifications","loading","user","storedUser","JSON","parse","error","console","documents","searchQuery","selectedFilter","stats","totalDocuments","totalSize","recentUploads","ActionTypes","SET_THEME","ADD_NOTIFICATION","REMOVE_NOTIFICATION","SET_LOADING","SET_USER","SET_DOCUMENTS","ADD_DOCUMENT","UPDATE_DOCUMENT","REMOVE_DOCUMENT","SET_SEARCH_QUERY","SET_FILTER","UPDATE_STATS","appReducer","state","action","type","setItem","payload","document","documentElement","setAttribute","id","Date","now","filter","n","Array","isArray","map","doc","AppContext","AppProvider","children","_s","dispatch","forEach","notification","autoRemove","setTimeout","actions","toggleTheme","newTheme","showNotification","message","title","removeNotification","setLoading","setUser","loadUser","authService","updatedUser","default","getProfile","apiError","warn","isAuthenticated","window","location","href","setDocuments","documentsArray","reduce","sum","file_size","uploadDate","uploaded_at","weekAgo","setDate","getDate","length","loadDocuments","documentService","getDocuments","created_at","addDocument","updateDocument","deleteDocument","documentId","removeDocument","setSearchQuery","query","setFilter","getFilteredDocuments","filtered","toLowerCase","includes","description","document_type","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useApp","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/PC/Desktop/modifier/Gestion_bibliotheque/espace_client_app/frontend/src/contexts/AppContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\n\n// Initial state\nconst initialState = {\n  theme: localStorage.getItem('theme') || 'light',\n  notifications: [],\n  loading: false,\n  user: (() => {\n    // Essayer de charger l'utilisateur depuis le localStorage au démarrage\n    try {\n      const storedUser = localStorage.getItem('user');\n      return storedUser ? JSON.parse(storedUser) : null;\n    } catch (error) {\n      console.error('Erreur lors du chargement de l\\'utilisateur depuis localStorage:', error);\n      return null;\n    }\n  })(),\n  documents: [],\n  searchQuery: '',\n  selectedFilter: 'all',\n  stats: {\n    totalDocuments: 0,\n    totalSize: 0,\n    recentUploads: 0\n  }\n};\n\n// Action types\nconst ActionTypes = {\n  SET_THEME: 'SET_THEME',\n  ADD_NOTIFICATION: 'ADD_NOTIFICATION',\n  REMOVE_NOTIFICATION: 'REMOVE_NOTIFICATION',\n  SET_LOADING: 'SET_LOADING',\n  SET_USER: 'SET_USER',\n  SET_DOCUMENTS: 'SET_DOCUMENTS',\n  ADD_DOCUMENT: 'ADD_DOCUMENT',\n  UPDATE_DOCUMENT: 'UPDATE_DOCUMENT',\n  REMOVE_DOCUMENT: 'REMOVE_DOCUMENT',\n  SET_SEARCH_QUERY: 'SET_SEARCH_QUERY',\n  SET_FILTER: 'SET_FILTER',\n  UPDATE_STATS: 'UPDATE_STATS'\n};\n\n// Reducer\nconst appReducer = (state, action) => {\n  switch (action.type) {\n    case ActionTypes.SET_THEME:\n      localStorage.setItem('theme', action.payload);\n      document.documentElement.setAttribute('data-theme', action.payload);\n      return { ...state, theme: action.payload };\n\n    case ActionTypes.ADD_NOTIFICATION:\n      return {\n        ...state,\n        notifications: [...state.notifications, {\n          id: Date.now(),\n          ...action.payload\n        }]\n      };\n\n    case ActionTypes.REMOVE_NOTIFICATION:\n      return {\n        ...state,\n        notifications: state.notifications.filter(n => n.id !== action.payload)\n      };\n\n    case ActionTypes.SET_LOADING:\n      return { ...state, loading: action.payload };\n\n    case ActionTypes.SET_USER:\n      return { ...state, user: action.payload };\n\n    case ActionTypes.SET_DOCUMENTS:\n      return { ...state, documents: Array.isArray(action.payload) ? action.payload : [] };\n\n    case ActionTypes.ADD_DOCUMENT:\n      return {\n        ...state,\n        documents: [action.payload, ...(Array.isArray(state.documents) ? state.documents : [])]\n      };\n\n    case ActionTypes.UPDATE_DOCUMENT:\n      return {\n        ...state,\n        documents: Array.isArray(state.documents)\n          ? state.documents.map(doc =>\n              doc.id === action.payload.id ? action.payload : doc\n            )\n          : []\n      };\n\n    case ActionTypes.REMOVE_DOCUMENT:\n      return {\n        ...state,\n        documents: Array.isArray(state.documents)\n          ? state.documents.filter(doc => doc.id !== action.payload)\n          : []\n      };\n\n    case ActionTypes.SET_SEARCH_QUERY:\n      return { ...state, searchQuery: action.payload };\n\n    case ActionTypes.SET_FILTER:\n      return { ...state, selectedFilter: action.payload };\n\n    case ActionTypes.UPDATE_STATS:\n      return { ...state, stats: { ...state.stats, ...action.payload } };\n\n    default:\n      return state;\n  }\n};\n\n// Context\nconst AppContext = createContext();\n\n// Provider component\nexport const AppProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(appReducer, initialState);\n\n  // Initialize theme on mount\n  useEffect(() => {\n    document.documentElement.setAttribute('data-theme', state.theme);\n  }, []);\n\n  // Auto-remove notifications after 5 seconds\n  useEffect(() => {\n    state.notifications.forEach(notification => {\n      if (notification.autoRemove !== false) {\n        setTimeout(() => {\n          dispatch({ type: ActionTypes.REMOVE_NOTIFICATION, payload: notification.id });\n        }, 5000);\n      }\n    });\n  }, [state.notifications]);\n\n  // Actions\n  const actions = {\n    toggleTheme: () => {\n      const newTheme = state.theme === 'light' ? 'dark' : 'light';\n      dispatch({ type: ActionTypes.SET_THEME, payload: newTheme });\n    },\n\n    showNotification: (type, message, title = '') => {\n      dispatch({\n        type: ActionTypes.ADD_NOTIFICATION,\n        payload: { type, message, title }\n      });\n    },\n\n    removeNotification: (id) => {\n      dispatch({ type: ActionTypes.REMOVE_NOTIFICATION, payload: id });\n    },\n\n    setLoading: (loading) => {\n      dispatch({ type: ActionTypes.SET_LOADING, payload: loading });\n    },\n\n    setUser: (user) => {\n      dispatch({ type: ActionTypes.SET_USER, payload: user });\n    },\n\n    // Charger l'utilisateur depuis le localStorage ou l'API\n    loadUser: async () => {\n      try {\n        // D'abord, essayer de charger depuis le localStorage\n        const storedUser = localStorage.getItem('user');\n        if (storedUser) {\n          const user = JSON.parse(storedUser);\n          dispatch({ type: ActionTypes.SET_USER, payload: user });\n\n          // Ensuite, essayer de récupérer les données à jour depuis l'API\n          try {\n            const authService = await import('../services/authService');\n            const updatedUser = await authService.default.getProfile();\n            dispatch({ type: ActionTypes.SET_USER, payload: updatedUser });\n          } catch (apiError) {\n            // Si l'API échoue, on garde les données du localStorage\n            console.warn('Impossible de récupérer le profil depuis l\\'API:', apiError);\n          }\n        } else {\n          // Si pas de données dans localStorage, essayer l'API\n          const authService = await import('../services/authService');\n          const user = await authService.default.getProfile();\n          dispatch({ type: ActionTypes.SET_USER, payload: user });\n        }\n      } catch (error) {\n        console.error('Erreur lors du chargement de l\\'utilisateur:', error);\n        // Si tout échoue et qu'on est censé être connecté, rediriger vers login\n        const authService = await import('../services/authService');\n        if (!authService.default.isAuthenticated()) {\n          window.location.href = '/login';\n        }\n      }\n    },\n\n    setDocuments: (documents) => {\n      const documentsArray = Array.isArray(documents) ? documents : [];\n      dispatch({ type: ActionTypes.SET_DOCUMENTS, payload: documentsArray });\n\n      // Update stats\n      const totalSize = documentsArray.reduce((sum, doc) => sum + (doc.file_size || 0), 0);\n      const recentUploads = documentsArray.filter(doc => {\n        const uploadDate = new Date(doc.uploaded_at);\n        const weekAgo = new Date();\n        weekAgo.setDate(weekAgo.getDate() - 7);\n        return uploadDate > weekAgo;\n      }).length;\n\n      dispatch({\n        type: ActionTypes.UPDATE_STATS,\n        payload: {\n          totalDocuments: documentsArray.length,\n          totalSize,\n          recentUploads\n        }\n      });\n    },\n\n    // Charger les documents depuis l'API\n    loadDocuments: async () => {\n      try {\n        const documentService = await import('../services/documentService');\n        const documents = await documentService.default.getDocuments();\n        dispatch({ type: ActionTypes.SET_DOCUMENTS, payload: documents });\n\n        // Update stats\n        const totalSize = documents.reduce((sum, doc) => sum + (doc.file_size || 0), 0);\n        const recentUploads = documents.filter(doc => {\n          const uploadDate = new Date(doc.uploaded_at || doc.created_at);\n          const weekAgo = new Date();\n          weekAgo.setDate(weekAgo.getDate() - 7);\n          return uploadDate > weekAgo;\n        }).length;\n\n        dispatch({\n          type: ActionTypes.UPDATE_STATS,\n          payload: {\n            totalDocuments: documents.length,\n            totalSize,\n            recentUploads\n          }\n        });\n      } catch (error) {\n        console.error('Erreur lors du chargement des documents:', error);\n        actions.showNotification('error', 'Erreur lors du chargement des documents');\n      }\n    },\n\n    addDocument: (document) => {\n      dispatch({ type: ActionTypes.ADD_DOCUMENT, payload: document });\n      actions.showNotification('success', 'Document ajouté avec succès', 'Succès');\n    },\n\n    // Mettre à jour un document\n    updateDocument: (document) => {\n      dispatch({ type: ActionTypes.UPDATE_DOCUMENT, payload: document });\n      actions.showNotification('success', 'Document modifié avec succès', 'Succès');\n    },\n\n    // Supprimer un document\n    deleteDocument: async (documentId) => {\n      try {\n        const documentService = await import('../services/documentService');\n        await documentService.default.deleteDocument(documentId);\n        dispatch({ type: ActionTypes.REMOVE_DOCUMENT, payload: documentId });\n        actions.showNotification('success', 'Document supprimé avec succès');\n      } catch (error) {\n        console.error('Erreur lors de la suppression:', error);\n        actions.showNotification('error', 'Erreur lors de la suppression du document');\n        throw error;\n      }\n    },\n\n    removeDocument: (id) => {\n      dispatch({ type: ActionTypes.REMOVE_DOCUMENT, payload: id });\n      actions.showNotification('success', 'Document supprimé avec succès', 'Succès');\n    },\n\n    setSearchQuery: (query) => {\n      dispatch({ type: ActionTypes.SET_SEARCH_QUERY, payload: query });\n    },\n\n    setFilter: (filter) => {\n      dispatch({ type: ActionTypes.SET_FILTER, payload: filter });\n    },\n\n    // Filtered documents based on search and filter\n    getFilteredDocuments: () => {\n      // S'assurer que documents est un tableau\n      let filtered = Array.isArray(state.documents) ? state.documents : [];\n\n      // Apply search filter\n      if (state.searchQuery) {\n        const query = state.searchQuery.toLowerCase();\n        filtered = filtered.filter(doc =>\n          doc.title.toLowerCase().includes(query) ||\n          doc.description.toLowerCase().includes(query)\n        );\n      }\n\n      // Apply type filter\n      if (state.selectedFilter !== 'all') {\n        filtered = filtered.filter(doc => doc.document_type === state.selectedFilter);\n      }\n\n      return filtered;\n    }\n  };\n\n  return (\n    <AppContext.Provider value={{ state, actions }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\n// Custom hook to use the context\nexport const useApp = () => {\n  const context = useContext(AppContext);\n  if (!context) {\n    throw new Error('useApp must be used within an AppProvider');\n  }\n  return context;\n};\n\nexport default AppContext;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}