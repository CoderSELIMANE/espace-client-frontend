{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://127.0.0.1:8000/api';\n\n// Configuration d'axios\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Intercepteur pour ajouter le token JWT aux requêtes\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('access_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Intercepteur pour gérer les erreurs de réponse\napi.interceptors.response.use(response => response, async error => {\n  var _error$response;\n  const originalRequest = error.config;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401 && !originalRequest._retry) {\n    originalRequest._retry = true;\n    try {\n      const refreshToken = localStorage.getItem('refresh_token');\n      if (refreshToken) {\n        const response = await axios.post(`${API_BASE_URL}/token/refresh/`, {\n          refresh: refreshToken\n        });\n        const {\n          access\n        } = response.data;\n        localStorage.setItem('access_token', access);\n\n        // Retry the original request with new token\n        originalRequest.headers.Authorization = `Bearer ${access}`;\n        return api(originalRequest);\n      }\n    } catch (refreshError) {\n      // Refresh failed, redirect to login\n      localStorage.removeItem('access_token');\n      localStorage.removeItem('refresh_token');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n    }\n  }\n  return Promise.reject(error);\n});\nclass AuthService {\n  // Inscription\n  async register(userData) {\n    try {\n      const response = await api.post('/register/', userData);\n      if (response.data.tokens) {\n        this.setTokens(response.data.tokens);\n        this.setUser(response.data.user);\n      }\n      return response.data;\n    } catch (error) {\n      var _error$response2;\n      throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message;\n    }\n  }\n\n  // Connexion\n  async login(email, password) {\n    try {\n      const response = await api.post('/login/', {\n        email,\n        password\n      });\n      if (response.data.tokens) {\n        this.setTokens(response.data.tokens);\n        this.setUser(response.data.user);\n        return {\n          success: true,\n          user: response.data.user\n        };\n      }\n      return {\n        success: false,\n        message: 'Erreur de connexion'\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data, _error$response4, _error$response4$data;\n      console.error('Erreur de connexion:', error);\n      return {\n        success: false,\n        message: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.detail) || 'Erreur de connexion'\n      };\n    }\n  }\n\n  // Déconnexion\n  logout() {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n\n  // Vérifier si l'utilisateur est connecté\n  isAuthenticated() {\n    const token = localStorage.getItem('access_token');\n    const user = localStorage.getItem('user');\n    return !!(token && user);\n  }\n\n  // Obtenir l'utilisateur actuel\n  getCurrentUser() {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  }\n\n  // Obtenir le token d'accès\n  getAccessToken() {\n    return localStorage.getItem('access_token');\n  }\n\n  // Obtenir le token de rafraîchissement\n  getRefreshToken() {\n    return localStorage.getItem('refresh_token');\n  }\n\n  // Vérifier si l'utilisateur est admin\n  isAdmin() {\n    const user = this.getCurrentUser();\n    return user && (user.is_staff || user.is_superuser);\n  }\n\n  // Obtenir le profil utilisateur\n  async getProfile() {\n    try {\n      const response = await api.get('/profile/');\n      this.setUser(response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response5;\n      throw ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error.message;\n    }\n  }\n\n  // Mettre à jour le profil utilisateur\n  async updateProfile(profileData) {\n    try {\n      console.log('AuthService: Envoi des données de profil:', profileData);\n      const response = await api.put('/profile/', profileData);\n      console.log('AuthService: Réponse reçue:', response.data);\n      this.setUser(response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response6, _error$response7;\n      console.error('AuthService: Erreur lors de la mise à jour du profil:', error);\n      console.error('AuthService: Statut de la réponse:', (_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.status);\n      console.error('AuthService: Données de la réponse:', (_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data);\n\n      // Améliorer la gestion d'erreurs\n      if (error.response) {\n        // Erreur de réponse HTTP\n        const errorData = error.response.data;\n        if (typeof errorData === 'object') {\n          // Si c'est un objet d'erreurs de validation\n          const firstError = Object.values(errorData)[0];\n          if (Array.isArray(firstError)) {\n            throw new Error(firstError[0]);\n          } else if (typeof firstError === 'string') {\n            throw new Error(firstError);\n          } else if (errorData.detail) {\n            throw new Error(errorData.detail);\n          } else if (errorData.message) {\n            throw new Error(errorData.message);\n          }\n        } else if (typeof errorData === 'string') {\n          throw new Error(errorData);\n        }\n        throw new Error(`Erreur HTTP ${error.response.status}`);\n      } else if (error.request) {\n        // Erreur de réseau\n        throw new Error('Erreur de connexion au serveur');\n      } else {\n        // Autre erreur\n        throw new Error(error.message || 'Erreur inconnue');\n      }\n    }\n  }\n\n  // Méthodes utilitaires privées\n  setTokens(tokens) {\n    localStorage.setItem('access_token', tokens.access);\n    localStorage.setItem('refresh_token', tokens.refresh);\n  }\n  setUser(user) {\n    localStorage.setItem('user', JSON.stringify(user));\n  }\n}\nexport default new AuthService();\nexport { api };","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","originalRequest","status","_retry","refreshToken","post","refresh","access","data","setItem","refreshError","removeItem","window","location","href","AuthService","register","userData","tokens","setTokens","setUser","user","_error$response2","message","login","email","password","success","_error$response3","_error$response3$data","_error$response4","_error$response4$data","console","detail","logout","isAuthenticated","getCurrentUser","JSON","parse","getAccessToken","getRefreshToken","isAdmin","is_staff","is_superuser","getProfile","get","_error$response5","updateProfile","profileData","log","put","_error$response6","_error$response7","errorData","firstError","Object","values","Array","isArray","Error","stringify"],"sources":["C:/Users/PC/Desktop/modifier/Gestion_bibliotheque/espace_client_app/frontend/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://127.0.0.1:8000/api';\n\n// Configuration d'axios\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Intercepteur pour ajouter le token JWT aux requêtes\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('access_token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Intercepteur pour gérer les erreurs de réponse\napi.interceptors.response.use(\n  (response) => response,\n  async (error) => {\n    const originalRequest = error.config;\n\n    if (error.response?.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n\n      try {\n        const refreshToken = localStorage.getItem('refresh_token');\n        if (refreshToken) {\n          const response = await axios.post(`${API_BASE_URL}/token/refresh/`, {\n            refresh: refreshToken,\n          });\n\n          const { access } = response.data;\n          localStorage.setItem('access_token', access);\n\n          // Retry the original request with new token\n          originalRequest.headers.Authorization = `Bearer ${access}`;\n          return api(originalRequest);\n        }\n      } catch (refreshError) {\n        // Refresh failed, redirect to login\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('refresh_token');\n        localStorage.removeItem('user');\n        window.location.href = '/login';\n      }\n    }\n\n    return Promise.reject(error);\n  }\n);\n\nclass AuthService {\n  // Inscription\n  async register(userData) {\n    try {\n      const response = await api.post('/register/', userData);\n      if (response.data.tokens) {\n        this.setTokens(response.data.tokens);\n        this.setUser(response.data.user);\n      }\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  }\n\n  // Connexion\n  async login(email, password) {\n    try {\n      const response = await api.post('/login/', { email, password });\n      if (response.data.tokens) {\n        this.setTokens(response.data.tokens);\n        this.setUser(response.data.user);\n        return { success: true, user: response.data.user };\n      }\n      return { success: false, message: 'Erreur de connexion' };\n    } catch (error) {\n      console.error('Erreur de connexion:', error);\n      return {\n        success: false,\n        message: error.response?.data?.message || error.response?.data?.detail || 'Erreur de connexion'\n      };\n    }\n  }\n\n  // Déconnexion\n  logout() {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n\n  // Vérifier si l'utilisateur est connecté\n  isAuthenticated() {\n    const token = localStorage.getItem('access_token');\n    const user = localStorage.getItem('user');\n    return !!(token && user);\n  }\n\n  // Obtenir l'utilisateur actuel\n  getCurrentUser() {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  }\n\n  // Obtenir le token d'accès\n  getAccessToken() {\n    return localStorage.getItem('access_token');\n  }\n\n  // Obtenir le token de rafraîchissement\n  getRefreshToken() {\n    return localStorage.getItem('refresh_token');\n  }\n\n  // Vérifier si l'utilisateur est admin\n  isAdmin() {\n    const user = this.getCurrentUser();\n    return user && (user.is_staff || user.is_superuser);\n  }\n\n  // Obtenir le profil utilisateur\n  async getProfile() {\n    try {\n      const response = await api.get('/profile/');\n      this.setUser(response.data);\n      return response.data;\n    } catch (error) {\n      throw error.response?.data || error.message;\n    }\n  }\n\n  // Mettre à jour le profil utilisateur\n  async updateProfile(profileData) {\n    try {\n      console.log('AuthService: Envoi des données de profil:', profileData);\n      const response = await api.put('/profile/', profileData);\n      console.log('AuthService: Réponse reçue:', response.data);\n\n      this.setUser(response.data);\n      return response.data;\n    } catch (error) {\n      console.error('AuthService: Erreur lors de la mise à jour du profil:', error);\n      console.error('AuthService: Statut de la réponse:', error.response?.status);\n      console.error('AuthService: Données de la réponse:', error.response?.data);\n\n      // Améliorer la gestion d'erreurs\n      if (error.response) {\n        // Erreur de réponse HTTP\n        const errorData = error.response.data;\n        if (typeof errorData === 'object') {\n          // Si c'est un objet d'erreurs de validation\n          const firstError = Object.values(errorData)[0];\n          if (Array.isArray(firstError)) {\n            throw new Error(firstError[0]);\n          } else if (typeof firstError === 'string') {\n            throw new Error(firstError);\n          } else if (errorData.detail) {\n            throw new Error(errorData.detail);\n          } else if (errorData.message) {\n            throw new Error(errorData.message);\n          }\n        } else if (typeof errorData === 'string') {\n          throw new Error(errorData);\n        }\n        throw new Error(`Erreur HTTP ${error.response.status}`);\n      } else if (error.request) {\n        // Erreur de réseau\n        throw new Error('Erreur de connexion au serveur');\n      } else {\n        // Autre erreur\n        throw new Error(error.message || 'Erreur inconnue');\n      }\n    }\n  }\n\n  // Méthodes utilitaires privées\n  setTokens(tokens) {\n    localStorage.setItem('access_token', tokens.access);\n    localStorage.setItem('refresh_token', tokens.refresh);\n  }\n\n  setUser(user) {\n    localStorage.setItem('user', JSON.stringify(user));\n  }\n}\n\nexport default new AuthService();\nexport { api };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}